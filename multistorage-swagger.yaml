openapi: 3.0.0
info:
  title: KeyVaultManager API
  description: API for managing encryption keys and performing encryption/decryption operations with multi-storage support
  version: 1.1.0
  contact:
    email: support@keyvaultmanager.com

servers:
  - url: https://localhost:3000
    description: Development server (HTTPS)
  - url: http://localhost:30001
    description: Development server (HTTP)

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
      description: API key (use 'api-key-mvp-2024')
    LicenseKeyAuth:
      type: apiKey
      in: header
      name: x-license-key
      description: License key (use 'keyvaultmanager-mvp-2024')
  
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
    
    KeyResponse:
      type: object
      properties:
        success:
          type: boolean
        name:
          type: string
        type:
          type: string
        value:
          type: string
        details:
          type: object
          properties:
            storageType:
              type: string
            created:
              type: string
              format: date-time
            enabled:
              type: boolean
    
    StorageLocation:
      type: object
      properties:
        code:
          type: string
          description: Unique identifier for the storage location
        description:
          type: string
          description: Human-readable description of the storage location
        containerName:
          type: string
          description: Azure Blob Storage container name
        isDefault:
          type: boolean
          description: Whether this is the default storage location

security:
  - ApiKeyAuth: []
    LicenseKeyAuth: []

paths:
  /api/generateKey:
    post:
      tags:
        - Keys
      summary: Generate a new cryptographic key
      description: Creates a new key with specified parameters
      security:
        - ApiKeyAuth: []
          LicenseKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - keyName
              properties:
                keyName:
                  type: string
                  example: "my-test-key"
                keyType:
                  type: string
                  enum: [AES, RSA, EC]
                  default: AES
                  example: "AES"
                keyLength:
                  type: integer
                  example: 256
      responses:
        '200':
          description: Key generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyResponse'
        '401':
          description: Unauthorized - Invalid API key or License key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/retrieveKey:
    post:
      tags:
        - Keys
      summary: Retrieve an existing key
      description: Retrieves details of an existing key
      security:
        - ApiKeyAuth: []
          LicenseKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - keyName
              properties:
                keyName:
                  type: string
                  example: "my-test-key"
      responses:
        '200':
          description: Key retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyResponse'
        '401':
          description: Unauthorized - Invalid API key or License key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/encrypt:
    post:
      tags:
        - Encryption
      summary: Encrypt data using a key
      description: Encrypts data or files using a specified key and stores in a chosen storage location
      security:
        - ApiKeyAuth: []
          LicenseKeyAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                keyName:
                  type: string
                  description: Name of the key to use for encryption
                file:
                  type: string
                  format: binary
                  description: File to encrypt
                data:
                  type: string
                  description: Text data to encrypt
                useStorage:
                  type: boolean
                  description: Whether to store the encrypted file
                storageCode:
                  type: string
                  description: Code identifying the storage location (default if not specified)
      responses:
        '200':
          description: Data encrypted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  encryptedData:
                    type: object
          headers:
            X-Storage-Code:
              schema:
                type: string
              description: Storage location where the file was stored
            Content-Disposition:
              schema:
                type: string
              description: Attachment filename
        '401':
          description: Unauthorized - Invalid API key or License key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/decrypt:
    post:
      tags:
        - Encryption
      summary: Decrypt data using a key
      description: Decrypts data or files using a specified key
      security:
        - ApiKeyAuth: []
          LicenseKeyAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                keyName:
                  type: string
                  description: Name of the key to use for decryption
                file:
                  type: string
                  format: binary
                  description: Encrypted file to decrypt
                data:
                  type: string
                  description: Encrypted data to decrypt
      responses:
        '200':
          description: Data decrypted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  decryptedData:
                    type: string
        '401':
          description: Unauthorized - Invalid API key or License key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/listFiles:
    get:
      tags:
        - Storage
      summary: List stored encrypted files
      description: Returns a list of all encrypted files in storage or in a specific storage location
      security:
        - ApiKeyAuth: []
          LicenseKeyAuth: []
      parameters:
        - in: query
          name: storageCode
          required: false
          schema:
            type: string
          description: Code identifying the storage location to list files from (all locations if not specified)
      responses:
        '200':
          description: List of files retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  files:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        url:
                          type: string
                        size:
                          type: integer
                        timestamp:
                          type: string
                        storageCode:
                          type: string
                        metadata:
                          type: object
        '401':
          description: Unauthorized - Invalid API key or License key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/downloadFile/{fileName}:
    get:
      tags:
        - Storage
      summary: Download an encrypted file
      description: Downloads a specific encrypted file from storage
      security:
        - ApiKeyAuth: []
          LicenseKeyAuth: []
      parameters:
        - in: path
          name: fileName
          required: true
          schema:
            type: string
          description: Name of the file to download
        - in: query
          name: storageCode
          required: false
          schema:
            type: string
          description: Code identifying the storage location to download from (default if not specified)
      responses:
        '200':
          description: File downloaded successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            X-Storage-Code:
              schema:
                type: string
              description: Storage location where the file was retrieved from
            Content-Disposition:
              schema:
                type: string
              description: Attachment filename
        '401':
          description: Unauthorized - Invalid API key or License key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /api/storageLocations:
    get:
      tags:
        - Storage Operations
      summary: List available storage locations
      description: Returns a list of all available storage locations configured in the system
      security:
        - ApiKeyAuth: []
          LicenseKeyAuth: []
      responses:
        '200':
          description: List of storage locations retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  locations:
                    type: array
                    items:
                      $ref: '#/components/schemas/StorageLocation'
        '401':
          description: Unauthorized - Invalid API key or License key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/retrieveDocument:
    get:
      tags:
        - Storage Operations
      summary: Retrieve and decrypt a document in one operation
      description: Retrieves an encrypted document from storage and decrypts it in a single operation
      security:
        - ApiKeyAuth: []
          LicenseKeyAuth: []
      parameters:
        - in: query
          name: documentName
          required: true
          schema:
            type: string
          description: Name of the encrypted document to retrieve and decrypt
        - in: query
          name: keyName
          required: true
          schema:
            type: string
          description: Name of the key to use for decryption
        - in: query
          name: storageCode
          required: false
          schema:
            type: string
          description: Code identifying the storage location to retrieve from (default if not specified)
      responses:
        '200':
          description: Document retrieved and decrypted successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Content-Disposition:
              schema:
                type: string
              description: Attachment filename (original name before encryption)
        '401':
          description: Unauthorized - Invalid API key or License key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/createSecret:
    post:
      tags:
        - Secrets
      summary: Create a new secret
      description: Stores a new secret in the key vault
      security:
        - ApiKeyAuth: []
          LicenseKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - secretName
                - secretValue
              properties:
                secretName:
                  type: string
                  example: "my-secret"
                secretValue:
                  type: string
                  example: "mysecretvalue123"
      responses:
        '200':
          description: Secret created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  name:
                    type: string
                  details:
                    type: object
        '401':
          description: Unauthorized - Invalid API key or License key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/retrieveSecret:
    post:
      tags:
        - Secrets
      summary: Retrieve a secret
      description: Retrieves a secret from the key vault
      security:
        - ApiKeyAuth: []
          LicenseKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - secretName
              properties:
                secretName:
                  type: string
                  example: "my-secret"
      responses:
        '200':
          description: Secret retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  name:
                    type: string
                  value:
                    type: string
                  details:
                    type: object
        '401':
          description: Unauthorized - Invalid API key or License key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 